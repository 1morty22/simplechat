openapi: 3.0.0
info:
  title: Simple Chat APIs
  version: 1.0.0
  description: API for the Simple Chat, handling chats, conversations, documents, user settings, groups, feedback, and admin functions.

servers:
  - url: /api
    description: API Root

tags:
  - name: Chat
    description: Chat interaction endpoints
  - name: Conversations
    description: Managing conversations and messages
  - name: Documents
    description: User document management and uploads
  - name: Feedback
    description: User feedback submission and review
  - name: Group Documents
    description: Group-level document management
  - name: Group Prompts
    description: Group-level prompt management
  - name: Groups
    description: Group management and membership
  - name: Models
    description: Fetching available AI models
  - name: Prompts
    description: User prompt management
  - name: Safety
    description: Content safety violation logging and review
  - name: Settings
    description: Application and user settings management
  - name: Users
    description: User-related operations like search and settings

paths:
  # --- Chat Routes (route_backend_chats.py) ---
  /chat:
    post:
      tags:
        - Chat
      summary: Send a message to the chat API
      description: Processes a user message, potentially performs searches (hybrid, Bing), generates images, interacts with the AI model, and returns a response. Handles conversation history, summarization, and content safety.
      security:
        - bearerAuth: [] # Assumes authentication is required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: Successful chat response, image generation response, or content safety block response.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ChatResponse'
                  - $ref: '#/components/schemas/ChatBlockedResponse'
                  - $ref: '#/components/schemas/ImageResponse'
        '400':
          description: Bad Request (e.g., invalid input)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (User not authenticated)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (e.g., AI model issue, DB error, Content Safety error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Conversation Routes (route_backend_conversations.py) ---
  /get_messages:
    get:
      tags:
        - Conversations
      summary: Get messages for a specific conversation
      description: Retrieves all messages associated with a given conversation ID, ordered by timestamp.
      security:
        - bearerAuth: []
      parameters:
        - name: conversation_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the conversation to fetch messages for.
      responses:
        '200':
          description: Successfully retrieved messages.
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
        '400':
          description: Bad Request (Missing conversation_id)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /get_conversations:
    get:
      tags:
        - Conversations
      summary: Get all conversations for the current user
      description: Retrieves a list of conversations belonging to the authenticated user, ordered by last update time.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved conversations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConversationSummary'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /create_conversation:
    post:
      tags:
        - Conversations
      summary: Create a new conversation
      description: Creates a new, empty conversation for the authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully created conversation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversation_id:
                    type: string
                    format: uuid
                  title:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /conversations/{conversation_id}:
    put:
      tags:
        - Conversations
      summary: Update conversation title
      description: Updates the title of a specific conversation.
      security:
        - bearerAuth: []
      parameters:
        - name: conversation_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the conversation to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  description: The new title for the conversation.
      responses:
        '200':
          description: Conversation title updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  title:
                    type: string
                  classification:
                    type: array
                    items:
                      type: string
                    description: Current classifications associated with the conversation.
        '400':
          description: Bad Request (Missing title)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (User does not own the conversation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' # Assuming read_item raises exception if not found
        '500':
          description: Internal Server Error (Failed to update)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Conversations
      summary: Delete a conversation
      description: Deletes a specific conversation and its associated messages. Optionally archives them first if configured.
      security:
        - bearerAuth: []
      parameters:
        - name: conversation_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the conversation to delete.
      responses:
        '200':
          description: Conversation deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to delete)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Document Routes (route_backend_documents.py) ---
  /get_file_content:
    post:
      tags:
        - Documents
      summary: Get content of a file previously uploaded within a conversation
      description: Retrieves the extracted content of a file message stored within a specific conversation. Requires `enable_user_workspace` setting.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - conversation_id
                - file_id
              properties:
                conversation_id:
                  type: string
                  format: uuid
                  description: The ID of the conversation containing the file.
                file_id:
                  type: string
                  description: The ID of the file message (e.g., 'convid_file_timestamp_rand').
      responses:
        '200':
          description: File content retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  file_content:
                    type: string
                    description: The combined text content of the file.
                  filename:
                    type: string
                    description: The original name of the file.
                  is_table:
                    type: boolean
                    description: Indicates if the content represents tabular data.
        '400':
          description: Bad Request (Missing parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation or File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /documents/upload:
    post:
      tags:
        - Documents
      summary: Upload a document to the user's workspace
      description: Accepts a file upload, saves it, creates a metadata record in the database with 'Queued' status, and queues a background task for processing and chunking. Requires `enable_user_workspace` setting.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: The document file to upload.
      responses:
        '200':
          description: File accepted for background processing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  document_id:
                    type: string
                    format: uuid
                    description: The ID assigned to the newly created document record.
        '400':
          description: Bad Request (No file, no filename)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (e.g., failed to create initial DB record)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /documents:
    get:
      tags:
        - Documents
      summary: Get user's documents with pagination
      description: Retrieves a paginated list of documents uploaded by the authenticated user. Requires `enable_user_workspace` setting.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: The page number to retrieve.
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
          description: The number of documents per page.
      responses:
        '200':
          description: List of documents retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentMetadata'
                  page:
                    type: integer
                  page_size:
                    type: integer
                  total_count:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /documents/{document_id}:
    get:
      tags:
        - Documents
      summary: Get details of a specific user document
      description: Retrieves the metadata for a single document owned by the authenticated user. Requires `enable_user_workspace` setting.
      security:
        - bearerAuth: []
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the document to retrieve.
      responses:
        '200':
          description: Document metadata retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentMetadata'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or user does not own document)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Documents
      summary: Update metadata of a user document
      description: Partially updates the metadata fields (like title, abstract, keywords, classification) of a specific document owned by the user. Requires `enable_user_workspace` setting.
      security:
        - bearerAuth: []
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the document to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: New title for the document.
                abstract:
                  type: string
                  description: New abstract for the document.
                keywords:
                  type: array
                  items:
                    type: string
                  description: New list of keywords.
                publication_date:
                  type: string
                  format: date-time
                  description: New publication date.
                document_classification:
                  type: string
                  description: New classification category.
                authors:
                  type: array
                  items:
                    type: string
                  description: New list of authors.
                # Add other patchable fields as needed
      responses:
        '200':
          description: Document metadata updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request (Invalid data format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or user does not own document)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Documents
      summary: Delete a user document
      description: Deletes a document metadata record and its associated chunks from the search index. Requires `enable_user_workspace` setting.
      security:
        - bearerAuth: []
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the document to delete.
      responses:
        '200':
          description: Document deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or user does not own document)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to delete)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /documents/{document_id}/extract_metadata:
    post:
      tags:
        - Documents
      summary: Queue metadata extraction for a document
      description: Queues a background job to extract metadata (like title, authors, etc.) from the document content using an AI model. Requires `enable_user_workspace` and `enable_extract_meta_data` settings.
      security:
        - bearerAuth: []
      parameters:
        - name: document_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the document for metadata extraction.
      responses:
        '200': # Changed from 202 to match code's immediate return
          description: Metadata extraction task queued successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  document_id:
                    type: string
                    format: uuid
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or user does not own document)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to queue task)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /get_citation:
    post:
      tags:
        - Documents
      summary: Get citation text by ID
      description: Retrieves the text content and basic metadata for a specific citation (chunk) ID from the search index. Requires `enable_user_workspace` setting.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - citation_id
              properties:
                citation_id:
                  type: string
                  description: The ID of the citation (chunk) to retrieve.
      responses:
        '200':
          description: Citation details retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  cited_text:
                    type: string
                  file_name:
                    type: string
                  page_number:
                    type: integer # Or string depending on what chunk_sequence holds
        '400':
          description: Bad Request (Missing citation_id)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or unauthorized access to citation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Citation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Feedback Routes (route_backend_feedback.py) ---
  /feedback/submit:
    post:
      tags:
        - Feedback
      summary: Submit feedback for a message
      description: Allows authenticated users to submit feedback (e.g., thumbs up/down) on a specific AI message within a conversation. Requires `enable_user_feedback` setting.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - messageId
                - conversationId
                - feedbackType
              properties:
                messageId:
                  type: string
                  description: The ID of the AI message receiving feedback.
                conversationId:
                  type: string
                  format: uuid
                  description: The ID of the conversation containing the message.
                feedbackType:
                  type: string
                  enum: [positive, negative, neutral] # Or whatever types you support
                  description: The type of feedback (e.g., 'positive', 'negative').
                reason:
                  type: string
                  description: Optional reason or comment for the feedback.
      responses:
        '200':
          description: Feedback submitted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  feedbackId:
                    type: string
                    format: uuid
        '400':
          description: Bad Request (Missing required fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to save feedback)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /feedback/review:
    get:
      tags:
        - Feedback
        - Admin
      summary: Get all feedback items (Admin)
      description: Retrieves all submitted feedback items for administrative review. Requires admin privileges and `enable_user_feedback` setting.
      security:
        - bearerAuth: [] # And admin role check via decorator
      responses:
        '200':
          description: List of feedback items retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeedbackItem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Not admin or feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /feedback/review/{feedbackId}:
    patch:
      tags:
        - Feedback
        - Admin
      summary: Update admin review fields for a feedback item (Admin)
      description: Allows admins to update the review status and notes for a specific feedback item. Requires admin privileges and `enable_user_feedback` setting.
      security:
        - bearerAuth: [] # And admin role check
      parameters:
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the feedback item to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                acknowledged:
                  type: boolean
                analysisNotes:
                  type: string
                responseToUser:
                  type: string
                actionTaken:
                  type: string
      responses:
        '200':
          description: Feedback item updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '400':
          description: Bad Request (Invalid data)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Not admin or feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Feedback item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /feedback/retest/{feedbackId}:
    post:
      tags:
        - Feedback
        - Admin
      summary: Retest a prompt from feedback (Admin)
      description: Allows admins to re-run the original user prompt from a feedback item against the current AI model to see if the response has improved. Requires admin privileges and `enable_user_feedback` setting.
      security:
        - bearerAuth: [] # And admin role check
      parameters:
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the feedback item containing the prompt to retest.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - prompt
              properties:
                prompt:
                  type: string
                  description: The user prompt extracted from the feedback item.
      responses:
        '200':
          description: Retest completed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  retestResponse:
                    type: string
                    description: The new response generated by the AI model for the prompt.
        '400':
          description: Bad Request (Missing prompt)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Not admin or feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to run prompt)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /feedback/my:
    get:
      tags:
        - Feedback
      summary: Get feedback submitted by the current user
      description: Retrieves a list of all feedback items submitted by the currently authenticated user. Requires `enable_user_feedback` setting.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's feedback items retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeedbackItem' # Read-only view for user
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or user ID not found in session)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Group Document Routes (route_backend_group_documents.py) ---
  /group_documents:
    get:
      tags:
        - Group Documents
        - Groups
      summary: Get documents for the active group
      description: Retrieves a list of documents associated with the user's currently active group. Requires `enable_group_workspaces` setting.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Group documents retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupDocumentMetadata' # Define if different from user docs
        '400':
          description: Bad Request (No active group selected)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or user not a member of the active group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Active group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /group_documents/upload:
    post:
      tags:
        - Group Documents
        - Groups
      summary: Upload a document to the active group
      description: Uploads a document to the user's active group. Requires appropriate role (Owner, Admin, DocumentManager) and `enable_group_workspaces` setting.
      security:
        - bearerAuth: [] # Role check via decorator
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: The document file to upload.
      responses:
        '200':
          description: Document uploaded successfully (likely triggers background processing).
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  # Potentially return document_id if created immediately
        '400':
          description: Bad Request (No active group, no file)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Active group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Upload processing failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /group_documents/{doc_id}:
    delete:
      tags:
        - Group Documents
        - Groups
      summary: Delete a document from a group
      description: Deletes a specific document from a specified group's collection. Requires appropriate role (Owner, Admin, DocumentManager) and `enable_group_workspaces` setting.
      security:
        - bearerAuth: [] # Role check via decorator
      parameters:
        - name: doc_id
          in: path
          required: true
          schema:
            type: string
            # format: uuid # Or just string if it's not always UUID
          description: The ID of the document to delete.
        - name: group_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group from which to delete the document.
      responses:
        '200':
          description: Document deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request (Missing group_id)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group or Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Deletion failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Group Prompt Routes (route_backend_group_prompts.py) ---
  /group_prompts:
    get:
      tags:
        - Group Prompts
        - Groups
      summary: Get prompts for the active group
      description: Retrieves a list of prompts associated with the user's currently active group. Requires `enable_group_workspaces` setting.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Group prompts retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  prompts:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupPrompt'
        '400':
          description: Bad Request (No active group selected)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or user not in group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Group Prompts
        - Groups
      summary: Create a new prompt for the active group
      description: Creates a new shared prompt within the user's active group. Requires `enable_group_workspaces` setting and potentially specific roles depending on policy.
      security:
        - bearerAuth: [] # Role check logic inside if needed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - content
              properties:
                name:
                  type: string
                  description: The name/title of the prompt.
                content:
                  type: string
                  description: The text content of the prompt.
      responses:
        '200': # Code uses 200, not 201
          description: Group prompt created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPrompt'
        '400':
          description: Bad Request (Missing name/content or no active group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /group_prompts/{prompt_id}:
    get:
      tags:
        - Group Prompts
        - Groups
      summary: Get a specific group prompt
      description: Retrieves the details of a single prompt belonging to the user's active group. Requires `enable_group_workspaces` setting.
      security:
        - bearerAuth: []
      parameters:
        - name: prompt_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group prompt to retrieve.
      responses:
        '200':
          description: Group prompt retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPrompt'
        '400':
          description: Bad Request (No active group selected)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or user not in group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group prompt not found in the active group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Group Prompts
        - Groups
      summary: Update a group prompt
      description: Updates the name and/or content of a specific prompt within the user's active group. Requires `enable_group_workspaces` setting and potentially specific roles.
      security:
        - bearerAuth: [] # Role check logic inside if needed
      parameters:
        - name: prompt_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group prompt to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name for the prompt.
                content:
                  type: string
                  description: The new content for the prompt.
      responses:
        '200':
          description: Group prompt updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPrompt'
        '400':
          description: Bad Request (No active group selected or invalid data)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group prompt not found in the active group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Group Prompts
        - Groups
      summary: Delete a group prompt
      description: Deletes a specific prompt from the user's active group. Requires `enable_group_workspaces` setting and potentially specific roles.
      security:
        - bearerAuth: [] # Role check logic inside if needed
      parameters:
        - name: prompt_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group prompt to delete.
      responses:
        '200':
          description: Group prompt deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request (No active group selected)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group prompt not found in the active group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Group Management Routes (route_backend_groups.py) ---
  /groups/discover:
    get:
      tags:
        - Groups
      summary: Discover available groups
      description: Returns a list of groups, optionally filtered by search term and whether to include groups the user is already a member of. Requires `enable_group_workspaces`.
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: Optional search term to filter groups by name or description.
        - name: showAll
          in: query
          schema:
            type: boolean
            default: false
          description: If true, includes groups the user is already a member of. Defaults to false (only shows groups the user is NOT in).
      responses:
        '200':
          description: List of discoverable groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupDiscoveryItem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups:
    get:
      tags:
        - Groups
      summary: List groups the user is a member of
      description: Retrieves a list of groups the authenticated user belongs to, optionally filtered by a search term. Includes the user's role in each group and marks the active group. Requires `enable_group_workspaces`.
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: Optional search term to filter groups by name.
      responses:
        '200':
          description: List of user's groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroupItem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Groups
      summary: Create a new group
      description: Creates a new group with the authenticated user as the owner. Requires `enable_group_workspaces` and potentially specific AD group membership (`create_group_role_required`).
      security:
        - bearerAuth: [] # Role check via decorator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: "Untitled Group"
                description:
                  type: string
      responses:
        '201':
          description: Group created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
        '400':
          description: Bad Request (e.g., group name conflict, validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{group_id}:
    get:
      tags:
        - Groups
      summary: Get group details
      description: Retrieves the full details of a specific group, including owner, members, admins, etc. Requires `enable_group_workspaces`. User must typically be a member.
      security:
        - bearerAuth: [] # Membership check likely happens inside
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group to retrieve.
      responses:
        '200':
          description: Group details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or user not member)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Groups
      summary: Delete a group (Owner only)
      description: Deletes an entire group. Only the group owner can perform this action. Requires `enable_group_workspaces` and potentially `create_group_role_required`.
      security:
        - bearerAuth: [] # Owner and potentially role check via decorator
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group to delete.
      responses:
        '200':
          description: Group deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled, not owner, or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch: # Also handles PUT in the code
      tags:
        - Groups
      summary: Update group details (Owner only)
      description: Updates the name and/or description of a group. Only the group owner can perform this action. Requires `enable_group_workspaces` and potentially `create_group_role_required`.
      security:
        - bearerAuth: [] # Owner and potentially role check via decorator
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name for the group.
                description:
                  type: string
                  description: The new description for the group.
      responses:
        '200':
          description: Group updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: string
                    format: uuid
        '400':
          description: Bad Request (Validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled, not owner, or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put: # Duplicate entry for PUT, mirroring PATCH functionality as per code
      tags:
        - Groups
      summary: Update group details (Owner only) - PUT
      description: Updates the name and/or description of a group. Only the group owner can perform this action. Requires `enable_group_workspaces` and potentially `create_group_role_required`.
      security:
        - bearerAuth: [] # Owner and potentially role check via decorator
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name for the group.
                description:
                  type: string
                  description: The new description for the group.
      responses:
        '200':
          description: Group updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: string
                    format: uuid
        '400':
          description: Bad Request (Validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled, not owner, or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /groups/setActive:
    patch:
      tags:
        - Groups
        - Users # Also relates to user preference
      summary: Set the user's active group
      description: Updates the authenticated user's settings to mark a specific group as their active group for subsequent operations. Requires `enable_group_workspaces`. User must be a member of the target group.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - groupId
              properties:
                groupId:
                  type: string
                  format: uuid
                  description: The ID of the group to set as active.
      responses:
        '200':
          description: Active group updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request (Missing groupId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or user not a member of the group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to update user settings)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{group_id}/requests:
    post:
      tags:
        - Groups
      summary: Request to join a group
      description: Allows an authenticated user to request membership in a specific group. Adds the user to the group's pending list if not already a member or pending. Requires `enable_group_workspaces`.
      security:
        - bearerAuth: []
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group the user wants to join.
      responses:
        '201':
          description: Membership request created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request (User already member or already requested)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Groups
      summary: View pending membership requests (Owner/Admin only)
      description: Retrieves the list of users who have requested to join the group. Requires Owner or Admin role in the group and `enable_group_workspaces`.
      security:
        - bearerAuth: [] # Role check via decorator
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group whose pending requests are to be viewed.
      responses:
        '200':
          description: List of pending users retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PendingUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{group_id}/requests/{request_id}:
    patch:
      tags:
        - Groups
      summary: Approve or reject a membership request (Owner/Admin only)
      description: Allows a group Owner or Admin to approve or reject a pending membership request identified by the requesting user's ID. Requires `enable_group_workspaces`.
      security:
        - bearerAuth: [] # Role check via decorator
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group.
        - name: request_id
          in: path
          required: true
          schema:
            type: string # User ID might not be UUID format
          description: The User ID of the pending request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [approve, reject]
                  description: Action to perform ('approve' or 'reject').
      responses:
        '200':
          description: Request processed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string # e.g., "User approved" or "User rejected"
        '400':
          description: Bad Request (Invalid action)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group or Request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{group_id}/members:
    post:
      tags:
        - Groups
      summary: Add a member directly to a group (Owner/Admin only)
      description: Allows a group Owner or Admin to add a user directly to the group, bypassing the request flow. Requires `enable_group_workspaces`.
      security:
        - bearerAuth: [] # Role check via decorator
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group to add a member to.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  description: The ID of the user to add.
                email:
                  type: string
                  format: email
                  description: Email of the user (optional).
                displayName:
                  type: string
                  description: Display name of the user (optional).
      responses:
        '200':
          description: Member added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request (Missing userId or user already member)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Groups
      summary: View group members
      description: Retrieves the list of members for a specific group, including their roles. Allows filtering by search term and role. Requires `enable_group_workspaces`. User must be a member.
      security:
        - bearerAuth: [] # Membership check inside
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group whose members are to be viewed.
        - name: search
          in: query
          schema:
            type: string
          description: Optional search term to filter members by display name or email.
        - name: role
          in: query
          schema:
            type: string
            enum: [Owner, Admin, DocumentManager, User]
          description: Optional filter to show only members with a specific role.
      responses:
        '200':
          description: List of group members retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupMember'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or user not a member)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{group_id}/members/{member_id}:
    delete:
      tags:
        - Groups
      summary: Remove a member from a group
      description: Removes a user from a group. Users can remove themselves (unless owner). Owner/Admin can remove others (except the owner). Requires `enable_group_workspaces`.
      security:
        - bearerAuth: [] # Permission checks inside
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group.
        - name: member_id
          in: path
          required: true
          schema:
            type: string # User ID
          description: The ID of the member to remove.
      responses:
        '200':
          description: Member removed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string # e.g., "User removed" or "You have left the group"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled, insufficient permissions, owner cannot leave/be removed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group or Member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Groups
      summary: Update a member's role (Owner/Admin only)
      description: Changes the role of a member within the group (Admin, DocumentManager, User). Only Owner or Admin can perform this. Requires `enable_group_workspaces`.
      security:
        - bearerAuth: [] # Role check via decorator
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group.
        - name: member_id
          in: path
          required: true
          schema:
            type: string # User ID
          description: The ID of the member whose role is to be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
                  enum: [Admin, DocumentManager, User]
                  description: The new role to assign.
      responses:
        '200':
          description: Member role updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request (Invalid role)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or insufficient permissions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group or Member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{group_id}/transferOwnership:
    patch:
      tags:
        - Groups
      summary: Transfer group ownership (Owner only)
      description: Transfers ownership of the group to another existing member. Only the current owner can initiate. Requires `enable_group_workspaces`.
      security:
        - bearerAuth: [] # Owner check inside
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - newOwnerId
              properties:
                newOwnerId:
                  type: string # User ID
                  description: The ID of the member to become the new owner.
      responses:
        '200':
          description: Ownership transferred successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request (Missing newOwnerId or new owner not a member)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or not owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /groups/{group_id}/fileCount:
    get:
      tags:
        - Groups
        - Admin # Often an admin/owner feature
      summary: Get the number of files in a group (Owner only)
      description: Returns the count of documents associated with a specific group. Requires Owner role and `enable_group_workspaces`.
      security:
        - bearerAuth: [] # Owner check inside
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the group.
      responses:
        '200':
          description: File count retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  fileCount:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or not owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Model Routes (route_backend_models.py) ---
  /models/gpt:
    get:
      tags:
        - Models
        - Admin # Often needed for config
      summary: Get available GPT models
      description: Retrieves a list of available GPT model deployments from the configured Azure OpenAI resource using Azure Management APIs. Requires user authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of GPT models retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelInfo'
        '400':
          description: Bad Request (Azure configuration missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to query Azure Management API)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /models/embedding:
    get:
      tags:
        - Models
        - Admin
      summary: Get available Embedding models
      description: Retrieves a list of available Embedding model deployments from the configured Azure OpenAI resource using Azure Management APIs. Requires user authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of Embedding models retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelInfo'
        '400':
          description: Bad Request (Azure configuration missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to query Azure Management API)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /models/image:
    get:
      tags:
        - Models
        - Admin
      summary: Get available Image Generation models
      description: Retrieves a list of available DALL-E model deployments from the configured Azure OpenAI resource using Azure Management APIs. Requires user authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of Image Generation models retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelInfo'
        '400':
          description: Bad Request (Azure configuration missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to query Azure Management API)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- User Prompt Routes (route_backend_prompts.py) ---
  /prompts:
    get:
      tags:
        - Prompts
      summary: Get user's saved prompts
      description: Retrieves a list of prompts saved by the authenticated user. Requires `enable_user_workspace` setting.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User prompts retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  prompts:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserPrompt'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Prompts
      summary: Create a new user prompt
      description: Creates and saves a new personal prompt for the authenticated user. Requires `enable_user_workspace` setting.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - content
              properties:
                name:
                  type: string
                  description: The name/title of the prompt.
                content:
                  type: string
                  description: The text content of the prompt.
      responses:
        '200': # Code uses 200
          description: User prompt created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPrompt'
        '400':
          description: Bad Request (Missing name or content)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /prompts/{prompt_id}:
    get:
      tags:
        - Prompts
      summary: Get a specific user prompt
      description: Retrieves the details of a single prompt saved by the authenticated user. Requires `enable_user_workspace` setting.
      security:
        - bearerAuth: []
      parameters:
        - name: prompt_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user prompt to retrieve.
      responses:
        '200':
          description: User prompt retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPrompt'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or user does not own prompt)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Prompt not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Prompts
      summary: Update a user prompt
      description: Updates the name and/or content of a specific prompt saved by the authenticated user. Requires `enable_user_workspace` setting.
      security:
        - bearerAuth: []
      parameters:
        - name: prompt_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user prompt to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name for the prompt.
                content:
                  type: string
                  description: The new content for the prompt.
      responses:
        '200':
          description: User prompt updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPrompt'
        '400':
          description: Bad Request (Invalid data)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or user does not own prompt)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Prompt not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Prompts
      summary: Delete a user prompt
      description: Deletes a specific prompt saved by the authenticated user. Requires `enable_user_workspace` setting.
      security:
        - bearerAuth: []
      parameters:
        - name: prompt_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user prompt to delete.
      responses:
        '200':
          description: User prompt deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or user does not own prompt)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Prompt not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Safety Routes (route_backend_safety.py) ---
  /safety/logs:
    get:
      tags:
        - Safety
        - Admin
      summary: Get all content safety logs (Admin)
      description: Retrieves all recorded content safety violation logs. Requires admin privileges and `enable_content_safety` setting.
      security:
        - bearerAuth: [] # Admin check via decorator
      responses:
        '200':
          description: Safety logs retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/SafetyLog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Not admin or feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /safety/logs/{log_id}:
    patch:
      tags:
        - Safety
        - Admin
      summary: Update a safety log entry (Admin)
      description: Allows an administrator to update the status, action taken, and notes for a specific content safety log entry. Requires admin privileges and `enable_content_safety`.
      security:
        - bearerAuth: [] # Admin check via decorator
      parameters:
        - name: log_id
          in: path
          required: true
          schema:
            type: string
            format: uuid # Assuming log_id is UUID
          description: The ID of the safety log entry to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: New status for the log (e.g., 'Reviewed', 'ActionTaken').
                action:
                  type: string
                  description: Description of the action taken regarding the violation.
                notes:
                  type: string
                  description: Administrative notes about the review or action.
      responses:
        '200':
          description: Safety log updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request (Invalid data)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Not admin or feature disabled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Safety log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /safety/logs/my:
    get:
      tags:
        - Safety
      summary: Get current user's safety logs
      description: Retrieves content safety violation logs pertaining only to the currently authenticated user. Requires `enable_content_safety`.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's safety logs retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/SafetyLog' # May need a read-only user view schema
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or user ID not found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /safety/logs/my/{log_id}:
    patch:
      tags:
        - Safety
      summary: Update user notes on their safety log
      description: Allows the authenticated user to add or update their own notes (`user_notes`) on a specific safety log entry belonging to them. Requires `enable_content_safety`.
      security:
        - bearerAuth: []
      parameters:
        - name: log_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the user's safety log entry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_notes:
                  type: string
                  description: Notes provided by the user regarding the safety log entry.
      responses:
        '200':
          description: Safety log updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request (Invalid data)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Feature disabled or log does not belong to user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Safety log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Settings Routes (route_backend_settings.py) ---
  /admin/settings/test_connection:
    post:
      tags:
        - Settings
        - Admin
      summary: Test connection for various backend services (Admin)
      description: Allows administrators to test connectivity to configured backend services (GPT, Embedding, Safety, Search, etc.) using ephemeral settings provided in the request body, without saving them. Requires admin privileges.
      security:
        - bearerAuth: [] # Admin check via decorator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - test_type
              properties:
                test_type:
                  type: string
                  enum: [gpt, embedding, image, safety, web_search, azure_ai_search, azure_doc_intelligence, chunking_api]
                  description: Specifies which service connection to test.
                # ... other properties specific to each test_type (e.g., endpoint, key, auth_type)
                # These are complex and vary, defining a 'oneOf' based on test_type might be too verbose.
                # Documenting the expected payload structure per test_type in the description is practical.
              example: # Example for testing GPT direct with key
                test_type: "gpt"
                enable_apim: false
                direct:
                  endpoint: "https://YOUR_AOAI_INSTANCE.openai.azure.com/"
                  api_version: "2024-02-01"
                  auth_type: "key"
                  key: "YOUR_AOAI_KEY"
                selected_model:
                  deploymentName: "gpt-4"
      responses:
        '200':
          description: Connection test successful (or skipped if service disabled).
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request (Unknown test_type or missing required fields for test)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Connection test failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- User Routes (route_backend_users.py) ---
  /userSearch:
    get:
      tags:
        - Users
      summary: Search for users via Microsoft Graph
      description: Searches for users in Azure Active Directory based on display name, email, or UPN using the Microsoft Graph API. Requires user authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          required: true # Code implies required as it doesn't handle empty well
          schema:
            type: string
          description: The search term to query against user properties.
      responses:
        '200':
          description: List of matching users (up to 10).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSearchResult'
        '401':
          description: Unauthorized (No access token or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500': # Or potentially other Graph API error codes
          description: Internal Server Error or Graph API request failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  details:
                    type: object # Or string depending on Graph error format
                    description: Detailed error information from Microsoft Graph.

  /user/settings:
    get:
      tags:
        - Users
        - Settings
      summary: Get current user's settings
      description: Retrieves the personalized settings document for the authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User settings retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsDocument'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to retrieve settings)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Users
        - Settings
      summary: Update current user's settings
      description: Updates specific fields within the authenticated user's settings document.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - settings
              properties:
                settings:
                  $ref: '#/components/schemas/UserSettings' # The inner settings object
      responses:
        '200':
          description: User settings updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request (Missing or invalid JSON body/structure)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (Failed to update settings)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: A description of the error that occurred.

    ChatRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: The user's message content.
        conversation_id:
          type: string
          format: uuid
          nullable: true
          description: The existing conversation ID. If null/missing, a new conversation is created.
        hybrid_search:
          type: boolean
          description: Whether to enable hybrid search augmentation.
          default: false
        selected_document_id:
          type: string
          format: uuid
          nullable: true
          description: If specified, scope hybrid search to this specific document ID.
        bing_search:
          type: boolean
          description: Whether to enable Bing web search augmentation.
          default: false
        image_generation:
          type: boolean
          description: Whether to enable image generation instead of text response.
          default: false
        doc_scope:
          type: string
          enum: [user, group, all] # Assuming these are the scopes
          description: The scope for document search ('user', 'group', or potentially 'all').
        active_group_id:
          type: string
          format: uuid
          nullable: true
          description: The user's active group ID, used if doc_scope is 'group'.

    ChatResponse:
      type: object
      properties:
        reply:
          type: string
          description: The AI's generated text response.
        conversation_id:
          type: string
          format: uuid
          description: The ID of the conversation (new or existing).
        conversation_title:
          type: string
          description: The current title of the conversation.
        classification:
          type: array
          items:
            type: string
          description: List of classification labels associated with the conversation based on documents used.
        model_deployment_name:
          type: string
          description: The name of the GPT model deployment used for the response.
        message_id:
          type: string
          description: The unique ID assigned to the assistant's message.
        blocked:
          type: boolean
          description: Always false for a successful text response.
          example: false
        augmented:
          type: boolean
          description: True if the response was augmented by search results (hybrid or web).
        hybrid_citations:
          type: array
          items:
            $ref: '#/components/schemas/HybridCitation'
          description: List of citations from hybrid search results used in the response.
        web_search_citations:
          type: array
          items:
            $ref: '#/components/schemas/WebSearchCitation'
          description: List of citations from web search results used in the response.

    ChatBlockedResponse:
      type: object
      properties:
        reply:
          type: string
          description: Message indicating the content was blocked by safety filters and why.
        blocked:
          type: boolean
          description: Always true when content safety blocks the message.
          example: true
        triggered_categories:
          type: array
          items:
            $ref: '#/components/schemas/TriggeredCategory'
          description: List of content safety categories triggered.
        blocklist_matches:
          type: array
          items:
            $ref: '#/components/schemas/BlocklistMatch'
          description: List of matched terms from content safety blocklists.
        conversation_id:
          type: string
          format: uuid
          description: The ID of the conversation.
        conversation_title:
          type: string
          description: The current title of the conversation.
        message_id:
          type: string
          description: The unique ID assigned to the safety message.

    ImageResponse:
      type: object
      properties:
        reply:
          type: string
          description: Placeholder text like "Image loading...".
        image_url:
          type: string
          format: url
          description: The URL of the generated image.
        conversation_id:
          type: string
          format: uuid
          description: The ID of the conversation.
        conversation_title:
          type: string
          description: The current title of the conversation.
        model_deployment_name:
          type: string
          description: The name of the image generation model deployment used.
        message_id:
          type: string
          description: The unique ID assigned to the image message.

    HybridCitation:
      type: object
      properties:
        file_name:
          type: string
        citation_id:
          type: string # Or format: uuid if it is
        page_number:
          type: integer # Or string
        chunk_id:
          type: string # Or format: uuid
        chunk_sequence:
          type: integer
        score:
          type: number
          format: float
        group_id:
          type: string
          format: uuid
          nullable: true
        version:
          type: string
        classification:
          type: string
          nullable: true

    WebSearchCitation:
      type: object
      properties:
        title:
          type: string
        url:
          type: string
          format: url
        snippet:
          type: string

    TriggeredCategory:
      type: object
      properties:
        category:
          type: string
          enum: [Hate, SelfHarm, Sexual, Violence] # Check Azure Content Safety docs for exact values
        severity:
          type: integer
          format: int32

    BlocklistMatch:
      type: object
      properties:
        blocklistName:
          type: string
        blocklistItemId:
          type: string
        blocklistItemText:
          type: string

    Message:
      type: object
      properties:
        id:
          type: string
          description: Unique message ID (e.g., 'convid_role_timestamp_rand').
        conversation_id:
          type: string
          format: uuid
        role:
          type: string
          enum: [user, assistant, system, file, image, safety]
        content:
          type: string # Can be text, URL (for image), JSON string (for table), etc.
        timestamp:
          type: string
          format: date-time
        model_deployment_name:
          type: string
          nullable: true
        # File specific fields (if role == 'file')
        filename:
          type: string
          description: Original filename (present if role is 'file').
        is_table:
          type: boolean
          description: Indicates if file content is tabular (present if role is 'file').
        # Image specific fields (if role == 'image')
        prompt:
          type: string
          description: The prompt used to generate the image (present if role is 'image').
        # Assistant specific fields (if role == 'assistant')
        augmented:
          type: boolean
          description: Was the assistant response augmented by search?
        hybrid_citations:
          type: array
          items:
            $ref: '#/components/schemas/HybridCitation'
        web_search_citations:
          type: array
          items:
            $ref: '#/components/schemas/WebSearchCitation'
      # Note: 'file_content' is intentionally omitted as it's large and usually not sent in list views

    ConversationSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string # User OID/Sub
        last_updated:
          type: string
          format: date-time
        title:
          type: string
        classification:
           type: array
           items:
             type: string
           description: Classifications derived from documents used in the conversation.

    DocumentMetadata: # For user documents list/details
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Parent document ID.
        user_id:
          type: string
        file_name:
          type: string
        status:
          type: string
          description: Processing status (e.g., 'Queued', 'Processing', 'Completed', 'Error').
        uploaded_at:
          type: string
          format: date-time
        num_file_chunks:
          type: integer
        percentage_complete:
          type: number
          format: float
        title: # Extracted/Editable metadata
          type: string
          nullable: true
        abstract:
          type: string
          nullable: true
        keywords:
          type: array
          items:
            type: string
          nullable: true
        publication_date:
          type: string
          format: date-time # Or just date string?
          nullable: true
        document_classification:
          type: string
          nullable: true
        authors:
          type: array
          items:
            type: string
          nullable: true
        # Add other fields stored in your documents_container

    GroupDocumentMetadata: # Define if different from user DocumentMetadata
      type: object
      properties:
        id:
          type: string
          # format: uuid # Or maybe just string?
        group_id:
          type: string
          format: uuid
        file_name:
          type: string
        uploaded_by_user_id:
          type: string
        uploaded_at:
          type: string
          format: date-time
        # Add other relevant fields for group docs

    FeedbackItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          nullable: true
        prompt:
          type: string
        aiResponse:
          type: string
        feedbackType:
          type: string
        reason:
          type: string
          nullable: true
        timestamp:
          type: string
          format: date-time
        adminReview:
          type: object
          properties:
            acknowledged:
              type: boolean
            analyzedBy:
              type: string
              nullable: true
            analysisNotes:
              type: string
              nullable: true
            responseToUser:
              type: string
              nullable: true
            actionTaken:
              type: string
              nullable: true
            reviewTimestamp:
              type: string
              format: date-time
              nullable: true

    GroupPrompt:
      type: object
      properties:
        id:
          type: string
          format: uuid
        group_id:
          type: string
          format: uuid
        uploaded_by_user_id:
          type: string
        name:
          type: string
        content:
          type: string
        type:
          type: string
          example: "group_prompt"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserPrompt:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
        name:
          type: string
        content:
          type: string
        type:
          type: string
          example: "user_prompt"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    GroupDiscoveryItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string

    UserGroupItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        userRole:
          type: string
          enum: [Owner, Admin, DocumentManager, User]
        isActive:
          type: boolean

    GroupUserDetails:
      type: object
      properties:
        id: # User ID (oid/sub)
          type: string
        email:
          type: string
          format: email
          nullable: true
        displayName:
          type: string
          nullable: true

    PendingUser:
      type: object
      properties:
        userId:
          type: string
        email:
          type: string
          format: email
          nullable: true
        displayName:
          type: string
          nullable: true

    GroupMember:
      type: object
      properties:
        userId:
          type: string
        displayName:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [Owner, Admin, DocumentManager, User]

    GroupDetails: # Full group document structure
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        owner:
          $ref: '#/components/schemas/GroupUserDetails'
        users:
          type: array
          items:
            $ref: '#/components/schemas/GroupUserDetails'
        admins:
          type: array
          items:
            type: string # User IDs
        documentManagers:
          type: array
          items:
            type: string # User IDs
        pendingUsers:
          type: array
          items:
            $ref: '#/components/schemas/PendingUser'
        createdDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
        type:
          type: string
          example: "group"
        # Add any other fields from your group document structure

    ModelInfo:
      type: object
      properties:
        deploymentName:
          type: string
          description: The name of the deployment in Azure OpenAI.
        modelName:
          type: string
          description: The underlying base model name (e.g., 'gpt-4', 'text-embedding-ada-002').

    SafetyLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
        conversation_id:
          type: string
          format: uuid
        message:
          type: string
          description: The user message that triggered the safety check.
        triggered_categories:
          type: array
          items:
            $ref: '#/components/schemas/TriggeredCategory'
        blocklist_matches:
          type: array
          items:
            $ref: '#/components/schemas/BlocklistMatch'
        timestamp: # Original timestamp from chat route
          type: string
          format: date-time
        reason:
          type: string
          description: Reason for blockage derived during chat processing.
        # Admin/User updateable fields
        status:
          type: string
          nullable: true
        action:
          type: string
          nullable: true
        notes: # Admin notes
          type: string
          nullable: true
        user_notes: # User's notes
          type: string
          nullable: true
        created_at: # Timestamp of log *update*
          type: string
          format: date-time
          nullable: true
        last_updated: # Timestamp of log *update*
          type: string
          format: date-time
          nullable: true

    UserSearchResult:
      type: object
      properties:
        id:
          type: string # Graph User ID (often UUID)
        displayName:
          type: string
        email:
          type: string
          format: email

    UserSettings: # Inner settings object used in POST/PATCH
      type: object
      properties:
        activeGroupOid:
          type: string
          format: uuid
          nullable: true
        layoutPreference:
          type: string # e.g., 'default', 'compact'
          nullable: true
        splitSizesPreference:
          type: array
          items:
            type: number
            format: float # Or integer depending on what you store
          nullable: true
        dockedSidebarHidden:
          type: boolean
          nullable: true
        # Add other user-configurable settings keys here

    UserSettingsDocument: # The full document stored for a user
      type: object
      properties:
        id:
          type: string # User ID (oid/sub)
        user_id: # Can be redundant but often included
          type: string
        settings:
          $ref: '#/components/schemas/UserSettings'
        last_updated:
          type: string
          format: date-time
        # Add any other top-level fields in the user settings document

  securitySchemes:
    bearerAuth: # Or use oauth2 if you want to specify the flow
      type: http
      scheme: bearer
      bearerFormat: JWT # Assuming JWT from Azure AD
      description: Azure AD issued JWT token required for authenticated endpoints. Pass as 'Authorization: Bearer <token>'.
    # Example OAuth2 definition (more complex, might not be needed if client just handles token)
    # oauth2Auth:
    #   type: oauth2
    #   description: Azure AD Authentication using OAuth2 Authorization Code flow.
    #   flows:
    #     authorizationCode:
    #       authorizationUrl: https://login.microsoftonline.com/YOUR_TENANT_ID/oauth2/v2.0/authorize
    #       tokenUrl: https://login.microsoftonline.com/YOUR_TENANT_ID/oauth2/v2.0/token
    #       scopes:
    #         api://YOUR_CLIENT_ID/access_as_user: Access the API as the logged-in user
    #         openid: Required for ID token
    #         profile: Basic user profile info
    #         email: User's email address
    #         offline_access: For refresh tokens if needed